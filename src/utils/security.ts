import CryptoJS from 'crypto-js';
import { v4 as uuidv4 } from 'uuid';
import { supabase } from '../lib/supabase';

const SECRET_KEY = import.meta.env.VITE_ENCRYPTION_KEY || 'solvix-security-key-2025';

export const encryptData = (data: string): string => {
  return CryptoJS.AES.encrypt(data, SECRET_KEY).toString();
};

export const decryptData = (encryptedData: string): string => {
  try {
    const bytes = CryptoJS.AES.decrypt(encryptedData, SECRET_KEY);
    return bytes.toString(CryptoJS.enc.Utf8);
  } catch {
    return '';
  }
};

// G√©n√©ration d'empreinte digitale du dispositif
export const getDeviceFingerprint = (): string => {
  try {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.textBaseline = 'top';
      ctx.font = '14px Arial';
      ctx.fillText('Solvix Device ID', 2, 2);
    }

    const fingerprint = btoa(
      navigator.userAgent +
      screen.width + 
      screen.height +
      navigator.language +
      Intl.DateTimeFormat().resolvedOptions().timeZone +
      (canvas.toDataURL() || 'fallback')
    ).slice(0, 32);

    return fingerprint;
  } catch {
    // Fallback si canvas n'est pas disponible
    return btoa(navigator.userAgent + screen.width + screen.height).slice(0, 32);
  }
};

// Interface pour les informations de quota
interface QuotaInfo {
  used: number;
  remaining: number;
  total: number;
  canCreateQuote: boolean;
  isPremium?: boolean;
}

// Gestion des quotas bas√©e sur la base de donn√©es
export const getSecureQuotaInfo = async (): Promise<QuotaInfo> => {
  try {
    // V√©rifier si l'utilisateur est connect√©
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.log('‚ùå QUOTA - Utilisateur non connect√©');
      return {
        used: 0,
        remaining: 0,
        total: 0,
        canCreateQuote: false
      };
    }

    // V√©rifier d'abord si l'utilisateur est premium
    const isPremiumStatus = await isPremiumActive();
    if (isPremiumStatus) {
      console.log('üíé QUOTA - Utilisateur premium, quota illimit√©');
      return {
        used: 0,
        remaining: 999999,
        total: 999999,
        canCreateQuote: true,
        isPremium: true
      };
    }

    // R√©cup√©rer les informations de quota depuis la base de donn√©es
    const { data, error } = await supabase.rpc('get_user_quota_info');
    
    if (error) {
      console.error('‚ùå QUOTA - Erreur lors de la r√©cup√©ration du quota:', error);
      
      // Fallback en cas d'erreur
      return {
        used: 0,
        remaining: 3,
        total: 3,
        canCreateQuote: true
      };
    }
    
    console.log('üìä QUOTA - Informations r√©cup√©r√©es:', data);
    
    return {
      used: data.used || 0,
      remaining: data.remaining || 0,
      total: data.total || 3,
      canCreateQuote: data.canCreateQuote || false,
      isPremium: data.isPremium || false
    };
  } catch (error) {
    console.error('‚ùå QUOTA - Exception lors de la r√©cup√©ration du quota:', error);
    
    // Fallback en cas d'exception
    return {
      used: 0,
      remaining: 3,
      total: 3,
      canCreateQuote: true
    };
  }
};

// Incr√©menter le compteur de quota
export const incrementQuotaUsage = async (): Promise<boolean> => {
  try {
    // V√©rifier si l'utilisateur est connect√©
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.log('‚ùå QUOTA - Utilisateur non connect√© pour incr√©menter');
      return false;
    }

    // V√©rifier d'abord si l'utilisateur est premium
    const isPremiumStatus = await isPremiumActive();
    if (isPremiumStatus) {
      console.log('üíé QUOTA - Utilisateur premium, pas besoin d\'incr√©menter');
      return true;
    }

    // Appeler la fonction RPC pour incr√©menter le quota
    const { data, error } = await supabase.rpc('increment_user_quota', {
      user_uuid: user.id
    });
    
    if (error) {
      console.error('‚ùå QUOTA - Erreur lors de l\'incr√©mentation:', error);
      return false;
    }
    
    console.log('üìà QUOTA - Incr√©mentation r√©ussie:', data);
    return data === true;
  } catch (error) {
    console.error('‚ùå QUOTA - Exception lors de l\'incr√©mentation:', error);
    return false;
  }
};

// Fonction pour v√©rifier si l'utilisateur peut cr√©er un devis
export const canCreateQuote = async (): Promise<boolean> => {
  try {
    // V√©rifier si l'utilisateur est connect√©
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.log('‚ùå QUOTA - Utilisateur non connect√© pour v√©rifier');
      return false;
    }

    // V√©rifier d'abord si l'utilisateur est premium
    const isPremiumStatus = await isPremiumActive();
    if (isPremiumStatus) {
      console.log('üíé QUOTA - Utilisateur premium, peut cr√©er un devis');
      return true;
    }

    // Appeler la fonction RPC pour v√©rifier si l'utilisateur peut cr√©er un devis
    const { data, error } = await supabase.rpc('can_create_quote', {
      user_uuid: user.id
    });
    
    if (error) {
      console.error('‚ùå QUOTA - Erreur lors de la v√©rification:', error);
      return false;
    }
    
    console.log('üîç QUOTA - V√©rification r√©ussie:', data);
    return data === true;
  } catch (error) {
    console.error('‚ùå QUOTA - Exception lors de la v√©rification:', error);
    return false;
  }
};

// Types pour les codes d'activation
interface CustomerInfo {
  name?: string;
  contact?: string;
  email?: string;
  notes?: string;
}

interface ActivationCode {
  id: string;
  code: string;
  status: 'AVAILABLE' | 'SOLD' | 'USED' | 'REVOKED';
  createdAt: string;
  soldAt?: string | null;
  usedAt?: string | null;
  deviceId?: string | null;
  revokedAt?: string | null;
  revokedReason?: string | null;
  customerInfo: CustomerInfo;
  price: number;
}

interface ActivationResult {
  success: boolean;
  message: string;
}

interface CodeStats {
  available: number;
  sold: number;
  used: number;
  revoked: number;
  revenue: number;
  total: number;
}

// Classe de gestion des codes d'activation avec Supabase
export class SecureCodeManager {
  // M√©thode pour g√©n√©rer un code d'activation
  public async generateCode(customerInfo?: CustomerInfo): Promise<string | null> {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error('‚ùå ERREUR R√âCUP√âRATION UTILISATEUR:', userError);
        return null;
      }
      
      if (!user) {
        console.error('‚ùå Utilisateur non connect√© pour g√©n√©rer un code');
        return null;
      }

      // Appeler la fonction SQL pour g√©n√©rer un code
      const { data, error } = await supabase.rpc('generate_activation_codes', {
        quantity: 1,
        admin_id: user.id
      });

      if (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration du code:', error);
        return null;
      }

      if (data && data.length > 0) {
        console.log('‚úÖ Code g√©n√©r√© avec succ√®s:', data[0].code);
        return data[0].code;
      }

      return null;
    } catch (error) {
      console.error('‚ùå Exception lors de la g√©n√©ration du code:', error);
      return null;
    }
  }

  // M√©thode pour g√©n√©rer un lot de codes d'activation
  public async generateBatch(quantity: number = 10): Promise<string[]> {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error('‚ùå ERREUR R√âCUP√âRATION UTILISATEUR:', userError);
        return [];
      }
      
      if (!user) {
        console.error('‚ùå Utilisateur non connect√© pour g√©n√©rer des codes');
        return [];
      }

      // Appeler la fonction SQL pour g√©n√©rer des codes
      const { data, error } = await supabase.rpc('generate_activation_codes', {
        quantity,
        admin_id: user.id
      });

      if (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration des codes:', error);
        return [];
      }

      if (data && data.length > 0) {
        console.log(`‚úÖ ${data.length} codes g√©n√©r√©s avec succ√®s`);
        return data.map(item => item.code);
      }

      return [];
    } catch (error) {
      console.error('‚ùå Exception lors de la g√©n√©ration des codes:', error);
      return [];
    }
  }

  // M√©thode pour marquer un code comme vendu
  public async markAsSold(code: string, customerContact: string): Promise<boolean> {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error('‚ùå ERREUR R√âCUP√âRATION UTILISATEUR:', userError);
        return false;
      }
      
      if (!user) {
        console.error('‚ùå Utilisateur non connect√© pour marquer un code comme vendu');
        return false;
      }

      // Appeler la fonction SQL pour marquer un code comme vendu
      const { data, error } = await supabase.rpc('mark_code_as_sold', {
        code_value: code,
        customer_contact: customerContact,
        admin_id: user.id
      });

      if (error) {
        console.error('‚ùå Erreur lors du marquage du code comme vendu:', error);
        return false;
      }

      console.log('‚úÖ Code marqu√© comme vendu avec succ√®s:', code);
      return true;
    } catch (error) {
      console.error('‚ùå Exception lors du marquage du code comme vendu:', error);
      return false;
    }
  }

  // M√©thode pour valider et activer un code
  public async validateAndActivateCode(inputCode: string, deviceId: string): Promise<ActivationResult> {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error('‚ùå ERREUR R√âCUP√âRATION UTILISATEUR:', userError);
        return { success: false, message: 'Utilisateur non connect√©' };
      }
      
      if (!user) {
        console.error('‚ùå Utilisateur non connect√© pour activer un code');
        return { success: false, message: 'Utilisateur non connect√©' };
      }

      const code = inputCode.trim().toUpperCase();

      // Appeler la fonction SQL pour activer un code
      const { data, error } = await supabase.rpc('activate_premium_code', {
        code_value: code,
        device_id: deviceId,
        user_id: user.id
      });

      if (error) {
        console.error('‚ùå Erreur lors de l\'activation du code:', error);
        return { success: false, message: error.message || 'Code invalide ou d√©j√† utilis√©' };
      }

      if (!data) {
        return { success: false, message: 'Code invalide ou d√©j√† utilis√©' };
      }

      console.log('‚úÖ Code activ√© avec succ√®s:', code);
      return { success: true, message: 'Code activ√© avec succ√®s!' };
    } catch (error: any) {
      console.error('‚ùå Exception lors de l\'activation du code:', error);
      return { success: false, message: error.message || 'Une erreur est survenue' };
    }
  }

  // M√©thode pour r√©voquer un code
  public async revokeCode(code: string, reason: string = ''): Promise<boolean> {
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error('‚ùå ERREUR R√âCUP√âRATION UTILISATEUR:', userError);
        return false;
      }
      
      if (!user) {
        console.error('‚ùå Utilisateur non connect√© pour r√©voquer un code');
        return false;
      }

      // Appeler la fonction SQL pour r√©voquer un code
      const { data, error } = await supabase.rpc('revoke_activation_code', {
        code_value: code,
        reason: reason || 'R√©voqu√© par l\'administrateur',
        admin_id: user.id
      });

      if (error) {
        console.error('‚ùå Erreur lors de la r√©vocation du code:', error);
        return false;
      }

      console.log('‚úÖ Code r√©voqu√© avec succ√®s:', code);
      return true;
    } catch (error) {
      console.error('‚ùå Exception lors de la r√©vocation du code:', error);
      return false;
    }
  }

  // M√©thode pour obtenir des statistiques sur les codes
  public async getStats(): Promise<CodeStats> {
    try {
      // Appeler la fonction SQL pour obtenir des statistiques
      const { data, error } = await supabase.rpc('get_activation_code_stats');

      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
        return { available: 0, sold: 0, used: 0, revoked: 0, revenue: 0, total: 0 };
      }

      return {
        available: data.available || 0,
        sold: data.sold || 0,
        used: data.used || 0,
        revoked: data.revoked || 0,
        revenue: data.revenue || 0,
        total: data.total || 0
      };
    } catch (error) {
      console.error('‚ùå Exception lors de la r√©cup√©ration des statistiques:', error);
      return { available: 0, sold: 0, used: 0, revoked: 0, revenue: 0, total: 0 };
    }
  }

  // M√©thode pour r√©cup√©rer tous les codes
  public async getAllCodes(): Promise<ActivationCode[]> {
    try {
      const { data, error } = await supabase
        .from('premium_activation_codes')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des codes:', error);
        return [];
      }

      // Convertir les donn√©es Supabase en format ActivationCode
      return data.map(item => ({
        id: item.id,
        code: item.code,
        status: item.status,
        createdAt: item.created_at,
        soldAt: item.sold_at,
        usedAt: item.used_at,
        deviceId: item.device_id,
        revokedAt: item.revoked_at,
        revokedReason: item.revoked_reason,
        customerInfo: item.customer_info || {},
        price: item.price || 5000
      }));
    } catch (error) {
      console.error('‚ùå Exception lors de la r√©cup√©ration des codes:', error);
      return [];
    }
  }

  // M√©thode pour exporter les codes au format CSV
  public async exportToCSV(): Promise<string> {
    try {
      const codes = await this.getAllCodes();
      
      const headers = ['Code', 'Status', 'Created', 'Sold', 'Used', 'Revoked', 'Customer', 'Device', 'Reason', 'Price'];
      const rows = codes.map(c => [
        c.code,
        c.status,
        c.createdAt,
        c.soldAt || '',
        c.usedAt || '',
        c.revokedAt || '',
        c.customerInfo?.contact || '',
        c.deviceId?.substring(0, 8) || '',
        c.revokedReason || '',
        c.price.toString()
      ]);
      
      const csv = [headers, ...rows].map(row => row.join(',')).join('\n');
      return csv;
    } catch (error) {
      console.error('‚ùå Exception lors de l\'export CSV:', error);
      return '';
    }
  }
}

// Singleton pour la gestion des codes
export const codeManager = new SecureCodeManager();

// Validation s√©curis√©e des codes d'activation
export const validatePremiumCode = async (code: string): Promise<boolean> => {
  if (!code || typeof code !== 'string') return false;
  
  const normalizedCode = code.trim().toUpperCase();
  
  try {
    // V√©rifier si le code existe et est disponible
    const { data, error } = await supabase
      .from('premium_activation_codes')
      .select('status')
      .eq('code', normalizedCode)
      .maybeSingle();
    
    if (error || !data) {
      return false;
    }
    
    // Le code est valide s'il est disponible ou vendu
    return data.status === 'AVAILABLE' || data.status === 'SOLD';
  } catch (error) {
    console.error('‚ùå Erreur lors de la validation du code:', error);
    return false;
  }
};

// V√©rifier si Premium est actif
export const isPremiumActive = async (): Promise<boolean> => {
  try {
    // R√©cup√©rer l'utilisateur connect√©
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.log('‚ùå PREMIUM - Utilisateur non connect√©');
      return false;
    }
    
    // R√©cup√©rer l'ID de l'appareil
    const deviceId = getDeviceFingerprint();
    
    // V√©rifier si l'utilisateur a un code premium actif
    const { data, error } = await supabase
      .from('premium_activation_codes')
      .select('*')
      .eq('user_id', user.id)
      .eq('device_id', deviceId)
      .eq('status', 'USED')
      .maybeSingle();
    
    if (error) {
      console.error('‚ùå PREMIUM - Erreur v√©rification statut:', error);
      return false;
    }
    
    const isPremium = !!data;
    console.log(`üîç PREMIUM - Statut pour User ID ${user.id}: ${isPremium ? 'Actif' : 'Inactif'}`);
    
    return isPremium;
  } catch (error) {
    console.error('‚ùå PREMIUM - Exception v√©rification statut:', error);
    return false;
  }
};

// Activer Premium avec un code
export const activatePremium = async (code: string): Promise<boolean> => {
  try {
    if (!await validatePremiumCode(code)) {
      return false;
    }

    const deviceId = getDeviceFingerprint();
    
    // Activer le code dans la base de donn√©es
    const result = await codeManager.validateAndActivateCode(code, deviceId);
    
    if (!result.success) {
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Erreur lors de l\'activation Premium:', error);
    return false;
  }
};

// Obtenir les informations Premium
export const getPremiumInfo = async () => {
  try {
    // R√©cup√©rer l'utilisateur connect√©
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      return null;
    }
    
    // R√©cup√©rer l'ID de l'appareil
    const deviceId = getDeviceFingerprint();
    
    // R√©cup√©rer les informations du code premium
    const { data, error } = await supabase
      .from('premium_activation_codes')
      .select('*')
      .eq('user_id', user.id)
      .eq('device_id', deviceId)
      .eq('status', 'USED')
      .maybeSingle();
    
    if (error || !data) {
      return null;
    }
    
    return {
      isActive: true,
      activationDate: new Date(data.used_at),
      code: data.code.slice(-4), // Afficher seulement les 4 derniers caract√®res
      version: '1.0'
    };
  } catch {
    return null;
  }
};